{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Exercise D21KTPM\\\\BCKH C\\u1EA5p Vi\\u1EC7n\\\\Semester-1-Year-3\\\\f2c\\\\v1.0.5\\\\client\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Post from \"./Post\";\nimport socket from \"../socket/socket-client\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_PORT;\nexport default function PostList() {\n  _s();\n  const [maxPost, setMaxPost] = useState(0);\n  const [fromPage, setFromPage] = useState(1);\n  const [limitPost, setLimitPost] = useState(2);\n  const [post, setPost] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  useEffect(() => {\n    fetchData(fromPage - 1, limitPost);\n    getMaxPost();\n  }, []);\n  useEffect(() => {\n    function handlePostAdded(newPost) {\n      setPost(prevPost => [newPost, ...prevPost]);\n    }\n    function handleCommentAdded(newComment) {\n      setPost(prevPost => {\n        const updatedPost = prevPost.map(postItem => {\n          if (postItem._id === newComment.postID) {\n            const updatedComments = [newComment, ...postItem.comments];\n            return {\n              ...postItem,\n              comments: updatedComments\n            };\n          }\n          return postItem;\n        });\n        return updatedPost;\n      });\n    }\n    socket.on(\"postAdded\", handlePostAdded);\n    socket.on(\"commentAdded\", handleCommentAdded);\n    return () => {\n      socket.off(\"postAdded\", handlePostAdded);\n      socket.off(\"commentAdded\", handleCommentAdded);\n    };\n  }, []);\n  const getMaxPost = async () => {\n    const MAXPOST = await getNumberPost();\n    setMaxPost(MAXPOST.numberPost);\n    if (MAXPOST.numberPost > 0) setHasMore(true);\n  };\n  const fetchData = async (from, to) => {\n    const data = await getLimitPost(from, to);\n    setPost(data);\n  };\n  const fetchMoreData = useCallback(async () => {\n    if (post.length === maxPost) {\n      setHasMore(false);\n      return;\n    }\n    const toPost = post.length + limitPost;\n    const data = await getLimitPost(post.length, toPost);\n    setPost(prevPost => [...prevPost, ...data]);\n  }, [maxPost, post.length]);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: post.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }, this),\n    scrollableTarget: \"content\",\n    children: post.map(item => /*#__PURE__*/_jsxDEV(Post, {\n      _id: item._id,\n      sender: item.sender,\n      content: {\n        text: item.content.text,\n        image: item.content.image !== \"\" ? `${server}/uploads/${item.content.image}` : \"\"\n      },\n      creationTime: item.creationTime,\n      comments: item.comments,\n      post: post,\n      setPost: setPost\n    }, item._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(PostList, \"5BskjlxlPadKBAsqXjOxmtv2qow=\");\n_c = PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Post","socket","InfiniteScroll","getLimitPost","getNumberPost","jsxDEV","_jsxDEV","server","process","env","REACT_APP_SEVER_IP","REACT_APP_SERVER_PORT","PostList","_s","maxPost","setMaxPost","fromPage","setFromPage","limitPost","setLimitPost","post","setPost","hasMore","setHasMore","fetchData","getMaxPost","handlePostAdded","newPost","prevPost","handleCommentAdded","newComment","updatedPost","map","postItem","_id","postID","updatedComments","comments","on","off","MAXPOST","numberPost","from","to","data","fetchMoreData","length","toPost","dataLength","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","item","sender","content","text","image","creationTime","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Exercise D21KTPM/BCKH Cấp Viện/Semester-1-Year-3/f2c/v1.0.5/client/src/components/PostList.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Post from \"./Post\";\r\nimport socket from \"../socket/socket-client\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\r\n\r\nconst server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_PORT;\r\n\r\nexport default function PostList() {\r\n  const [maxPost, setMaxPost] = useState(0);\r\n  const [fromPage, setFromPage] = useState(1);\r\n  const [limitPost, setLimitPost] = useState(2);\r\n  const [post, setPost] = useState([]);\r\n  const [hasMore, setHasMore] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData(fromPage - 1, limitPost);\r\n    getMaxPost();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function handlePostAdded(newPost) {\r\n      setPost((prevPost) => [newPost, ...prevPost]);\r\n    }\r\n\r\n    function handleCommentAdded(newComment) {\r\n      setPost((prevPost) => {\r\n        const updatedPost = prevPost.map((postItem) => {\r\n          if (postItem._id === newComment.postID) {\r\n            const updatedComments = [newComment, ...postItem.comments];\r\n            return {\r\n              ...postItem,\r\n              comments: updatedComments,\r\n            };\r\n          }\r\n          return postItem;\r\n        });\r\n        return updatedPost;\r\n      });\r\n    }\r\n\r\n    socket.on(\"postAdded\", handlePostAdded);\r\n    socket.on(\"commentAdded\", handleCommentAdded);\r\n\r\n    return () => {\r\n      socket.off(\"postAdded\", handlePostAdded);\r\n      socket.off(\"commentAdded\", handleCommentAdded);\r\n    };\r\n  }, []);\r\n\r\n  const getMaxPost = async () => {\r\n    const MAXPOST = await getNumberPost();\r\n    setMaxPost(MAXPOST.numberPost);\r\n    if (MAXPOST.numberPost > 0) setHasMore(true);\r\n  };\r\n\r\n  const fetchData = async (from, to) => {\r\n    const data = await getLimitPost(from, to);\r\n    setPost(data);\r\n  };\r\n\r\n  const fetchMoreData = useCallback(async () => {\r\n    if (post.length === maxPost) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n\r\n    const toPost = post.length + limitPost;\r\n    const data = await getLimitPost(post.length, toPost);\r\n    setPost((prevPost) => [...prevPost, ...data]);\r\n  }, [maxPost, post.length]);\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={post.length}\r\n      next={fetchMoreData}\r\n      hasMore={hasMore}\r\n      loader={<h4>Loading...</h4>}\r\n      scrollableTarget=\"content\"\r\n    >\r\n      {post.map((item) => (\r\n        <Post\r\n          key={item._id}\r\n          _id={item._id}\r\n          sender={item.sender}\r\n          content={{\r\n            text: item.content.text,\r\n            image: item.content.image !== \"\" ? `${server}/uploads/${item.content.image}` : \"\",\r\n          }}\r\n          creationTime={item.creationTime}\r\n          comments={item.comments}\r\n          post={post}\r\n          setPost={setPost}\r\n        />\r\n      ))}\r\n    </InfiniteScroll>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}