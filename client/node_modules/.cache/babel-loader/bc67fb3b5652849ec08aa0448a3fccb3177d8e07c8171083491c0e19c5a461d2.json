{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Exercise D21KTPM\\\\BCKH C\\u1EA5p Vi\\u1EC7n\\\\Semester-1-Year-3\\\\f2c\\\\v1.0.4\\\\client\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Post from \"./Post\";\nimport io from \"socket.io-client\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_SOCKET;\nconst socket = io(server, {\n  transports: [\"websocket\"]\n});\nexport default function PostList() {\n  _s();\n  const [maxPost, setMaxPost] = useState(0);\n  const [fromPage, setFromPage] = useState(1);\n  const [limitPost, setLimitPost] = useState(2);\n  const [post, setPost] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    fetchData(fromPage - 1, limitPost);\n    getMaxPost();\n    socket.on(\"postAdded\", newPost => {\n      const updatedPostList = [newPost, ...post];\n      setPost(updatedPostList);\n    });\n    socket.on(\"commentAdded\", newComment => {\n      // Update comments state to include the new comment\n      const updatedComments = [newComment, ...comments];\n      setComments(updatedComments);\n    });\n    return () => {\n      // Unsubscribe from socket events when unmounting the component\n      socket.off(\"postAdded\");\n      socket.off(\"commentAdded\");\n    };\n  }, []);\n  async function getMaxPost() {\n    const MAXPOST = await getNumberPost();\n    setMaxPost(MAXPOST.numberPost);\n    if (MAXPOST.numberPost > 0) setHasMore(true);\n  }\n  function fetchData(fromPage, toPage) {\n    socket.emit(\"getpost\", fromPage, toPage);\n    socket.on(\"getpost\", function (newPostData) {\n      // Update post state with new data\n      setPost(newPostData);\n    });\n  }\n  async function fetchMoreData() {\n    if (post.length === maxPost) {\n      setHasMore(false);\n      return;\n    }\n    const toPost = post.length + limitPost;\n\n    // Fetch more data\n    const data = await getLimitPost(post.length, toPost);\n    const updatedPostData = post.concat(data);\n    setPost(updatedPostData);\n  }\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: post.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }, this),\n    scrollableTarget: \"content\",\n    children: post.map((item, index) => /*#__PURE__*/_jsxDEV(Post, {\n      _id: item._id,\n      sender: item.sender,\n      content: {\n        text: item.content.text,\n        image: item.content.image !== \"\" ? `http://127.0.0.1:3001/uploads/${item.content.image}` : \"\"\n      },\n      creationTime: item.creationTime,\n      comments: comments.filter(comment => comment.postID === item._id),\n      post: post,\n      setPost: setPost\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(PostList, \"XDT76Uei1AWv+zmSF5ASzPnjM+s=\");\n_c = PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","Post","io","InfiniteScroll","getLimitPost","getNumberPost","jsxDEV","_jsxDEV","server","process","env","REACT_APP_SEVER_IP","REACT_APP_SERVER_SOCKET","socket","transports","PostList","_s","maxPost","setMaxPost","fromPage","setFromPage","limitPost","setLimitPost","post","setPost","hasMore","setHasMore","comments","setComments","fetchData","getMaxPost","on","newPost","updatedPostList","newComment","updatedComments","off","MAXPOST","numberPost","toPage","emit","newPostData","fetchMoreData","length","toPost","data","updatedPostData","concat","dataLength","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","map","item","index","_id","sender","content","text","image","creationTime","filter","comment","postID","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Exercise D21KTPM/BCKH Cấp Viện/Semester-1-Year-3/f2c/v1.0.4/client/src/components/PostList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Post from \"./Post\";\r\nimport io from \"socket.io-client\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\r\n\r\nconst server =\r\n  process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_SOCKET;\r\n\r\nconst socket = io(server, { transports: [\"websocket\"] });\r\n\r\nexport default function PostList() {\r\n  const [maxPost, setMaxPost] = useState(0);\r\n  const [fromPage, setFromPage] = useState(1);\r\n  const [limitPost, setLimitPost] = useState(2);\r\n  const [post, setPost] = useState([]);\r\n  const [hasMore, setHasMore] = useState(false);\r\n  const [comments, setComments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchData(fromPage - 1, limitPost);\r\n\r\n    getMaxPost();\r\n\r\n    socket.on(\"postAdded\", (newPost) => {\r\n      const updatedPostList = [newPost, ...post];\r\n      setPost(updatedPostList);\r\n    });\r\n\r\n    socket.on(\"commentAdded\", (newComment) => {\r\n      // Update comments state to include the new comment\r\n      const updatedComments = [newComment, ...comments];\r\n      setComments(updatedComments);\r\n    });\r\n\r\n    return () => {\r\n      // Unsubscribe from socket events when unmounting the component\r\n      socket.off(\"postAdded\");\r\n      socket.off(\"commentAdded\");\r\n    };\r\n  }, []);\r\n\r\n  async function getMaxPost() {\r\n    const MAXPOST = await getNumberPost();\r\n    setMaxPost(MAXPOST.numberPost);\r\n    if (MAXPOST.numberPost > 0) setHasMore(true);\r\n  }\r\n\r\n  function fetchData(fromPage, toPage) {\r\n    socket.emit(\"getpost\", fromPage, toPage);\r\n\r\n    socket.on(\"getpost\", function (newPostData) {\r\n      // Update post state with new data\r\n      setPost(newPostData);\r\n    });\r\n  }\r\n\r\n  async function fetchMoreData() {\r\n    if (post.length === maxPost) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n\r\n    const toPost = post.length + limitPost;\r\n\r\n    // Fetch more data\r\n    const data = await getLimitPost(post.length, toPost);\r\n    const updatedPostData = post.concat(data);\r\n    setPost(updatedPostData);\r\n  }\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={post.length}\r\n      next={fetchMoreData}\r\n      hasMore={hasMore}\r\n      loader={<h4>Loading...</h4>}\r\n      scrollableTarget=\"content\"\r\n    >\r\n      {post.map((item, index) => (\r\n        <Post\r\n          key={index}\r\n          _id={item._id}\r\n          sender={item.sender}\r\n          content={{\r\n            text: item.content.text,\r\n            image: item.content.image !== \"\" ? `http://127.0.0.1:3001/uploads/${item.content.image}` : \"\",\r\n          }}\r\n          creationTime={item.creationTime}\r\n          comments={comments.filter((comment) => comment.postID === item._id)}\r\n          post={post}\r\n          setPost={setPost}\r\n        />\r\n      ))}\r\n    </InfiniteScroll>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}