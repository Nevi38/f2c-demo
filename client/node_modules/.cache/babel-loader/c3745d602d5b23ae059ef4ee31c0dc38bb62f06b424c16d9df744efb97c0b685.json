{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Exercise D21KTPM\\\\BCKH C\\u1EA5p Vi\\u1EC7n\\\\Semester-1-Year-3\\\\f2c\\\\v1.0.4\\\\client\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Post from \"./Post\";\nimport io from \"socket.io-client\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_SOCKET;\nconst socket = io(server, {\n  transports: [\"websocket\"]\n});\nexport default function PostList() {\n  _s();\n  const [maxPost, setMaxPost] = useState(0);\n  const [fromPage, setFromPage] = useState(1);\n  const [limitPost, setLimitPost] = useState(2);\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  useEffect(() => {\n    fetchData(fromPage - 1, limitPost);\n    getMaxPost();\n    socket.on(\"postAdded\", newPost => {\n      // Update the posts state with the new post\n      const updatedPosts = [newPost, ...posts];\n      setPosts(updatedPosts);\n    });\n    socket.on(\"commentAdded\", newComment => {\n      // Update the posts state with the new comment\n      const updatedPosts = posts.map(post => {\n        if (post._id === newComment.postID) {\n          // Add the comment to the corresponding post\n          post.comments = [newComment, ...post.comments];\n        }\n        return post;\n      });\n      setPosts(updatedPosts);\n    });\n    return () => {\n      // Unsubscribe from socket events when unmounting the component\n      socket.off(\"postAdded\");\n      socket.off(\"commentAdded\");\n    };\n  }, []);\n  async function getMaxPost() {\n    const MAXPOST = await getNumberPost();\n    setMaxPost(MAXPOST.numberPost);\n    if (MAXPOST.numberPost > 0) setHasMore(true);\n  }\n  function fetchData(fromPage, toPage) {\n    socket.emit(\"getpost\", fromPage, toPage);\n    socket.on(\"getpost\", function (newPostData) {\n      setPosts(newPostData);\n    });\n  }\n  async function fetchMoreData() {\n    if (posts.length === maxPost) {\n      setHasMore(false);\n      return;\n    }\n    const toPost = posts.length + limitPost;\n\n    // Fetch more data\n    const data = await getLimitPost(posts.length, toPost);\n    const updatedPostData = posts.concat(data);\n    setPosts(updatedPostData);\n  }\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: posts.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }, this),\n    scrollableTarget: \"content\",\n    children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(Post, {\n      _id: post._id,\n      sender: post.sender,\n      content: {\n        text: post.content.text,\n        image: post.content.image !== \"\" ? `http://127.0.0.1:3001/uploads/${post.content.image}` : \"\"\n      },\n      creationTime: post.creationTime,\n      comments: post.comments,\n      posts: posts,\n      setPosts: setPosts\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(PostList, \"CVcdlGXXFHnzwCx35BQViewUHrc=\");\n_c = PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","Post","io","InfiniteScroll","getLimitPost","getNumberPost","jsxDEV","_jsxDEV","server","process","env","REACT_APP_SEVER_IP","REACT_APP_SERVER_SOCKET","socket","transports","PostList","_s","maxPost","setMaxPost","fromPage","setFromPage","limitPost","setLimitPost","posts","setPosts","hasMore","setHasMore","fetchData","getMaxPost","on","newPost","updatedPosts","newComment","map","post","_id","postID","comments","off","MAXPOST","numberPost","toPage","emit","newPostData","fetchMoreData","length","toPost","data","updatedPostData","concat","dataLength","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","index","sender","content","text","image","creationTime","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Exercise D21KTPM/BCKH Cấp Viện/Semester-1-Year-3/f2c/v1.0.4/client/src/components/PostList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Post from \"./Post\";\r\nimport io from \"socket.io-client\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\r\n\r\nconst server =\r\n  process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_SOCKET;\r\n\r\nconst socket = io(server, { transports: [\"websocket\"] });\r\n\r\nexport default function PostList() {\r\n  const [maxPost, setMaxPost] = useState(0);\r\n  const [fromPage, setFromPage] = useState(1);\r\n  const [limitPost, setLimitPost] = useState(2);\r\n  const [posts, setPosts] = useState([]);\r\n  const [hasMore, setHasMore] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData(fromPage - 1, limitPost);\r\n\r\n    getMaxPost();\r\n\r\n    socket.on(\"postAdded\", (newPost) => {\r\n      // Update the posts state with the new post\r\n      const updatedPosts = [newPost, ...posts];\r\n      setPosts(updatedPosts);\r\n    });\r\n\r\n    socket.on(\"commentAdded\", (newComment) => {\r\n      // Update the posts state with the new comment\r\n      const updatedPosts = posts.map((post) => {\r\n        if (post._id === newComment.postID) {\r\n          // Add the comment to the corresponding post\r\n          post.comments = [newComment, ...post.comments];\r\n        }\r\n        return post;\r\n      });\r\n      setPosts(updatedPosts);\r\n    });\r\n\r\n    return () => {\r\n      // Unsubscribe from socket events when unmounting the component\r\n      socket.off(\"postAdded\");\r\n      socket.off(\"commentAdded\");\r\n    };\r\n  }, []);\r\n\r\n  async function getMaxPost() {\r\n    const MAXPOST = await getNumberPost();\r\n    setMaxPost(MAXPOST.numberPost);\r\n    if (MAXPOST.numberPost > 0) setHasMore(true);\r\n  }\r\n\r\n  function fetchData(fromPage, toPage) {\r\n    socket.emit(\"getpost\", fromPage, toPage);\r\n\r\n    socket.on(\"getpost\", function (newPostData) {\r\n      setPosts(newPostData);\r\n    });\r\n  }\r\n\r\n  async function fetchMoreData() {\r\n    if (posts.length === maxPost) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n\r\n    const toPost = posts.length + limitPost;\r\n\r\n    // Fetch more data\r\n    const data = await getLimitPost(posts.length, toPost);\r\n    const updatedPostData = posts.concat(data);\r\n    setPosts(updatedPostData);\r\n  }\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={posts.length}\r\n      next={fetchMoreData}\r\n      hasMore={hasMore}\r\n      loader={<h4>Loading...</h4>}\r\n      scrollableTarget=\"content\"\r\n    >\r\n      {posts.map((post, index) => (\r\n        <Post\r\n          key={index}\r\n          _id={post._id}\r\n          sender={post.sender}\r\n          content={{\r\n            text: post.content.text,\r\n            image: post.content.image !== \"\" ? `http://127.0.0.1:3001/uploads/${post.content.image}` : \"\",\r\n          }}\r\n          creationTime={post.creationTime}\r\n          comments={post.comments}\r\n          posts={posts}\r\n          setPosts={setPosts}\r\n        />\r\n      ))}\r\n    </InfiniteScroll>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}