{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\quoct\\\\Data\\\\Exercise D21KTPM\\\\BCKH C\\u1EA5p Vi\\u1EC7n\\\\Semester-1-Year-3\\\\f2c\\\\v1.0.5\\\\client\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Post from \"./Post\";\nimport socket from \"../socket/socket-client\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_PORT;\nexport default function PostList() {\n  _s();\n  const [maxPost, setMaxPost] = useState(0);\n  const [fromPage, setFromPage] = useState(1);\n  const [limitPost, setLimitPost] = useState(2);\n  const [post, setPost] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const userRef = useRef();\n  const loadingTimeoutRef = useRef(null);\n  // LOAD POST ONE TIME\n  useEffect(() => {\n    userRef.current = JSON.parse(sessionStorage.getItem(\"userAuth\")).user;\n    fetchData(fromPage - 1, limitPost);\n    getMaxPost();\n  }, []);\n  useEffect(() => {\n    function handlePostAdded(newPost) {\n      const newList = [newPost, ...post];\n      setPost(newList);\n    }\n    function handleCommentAdded(newComment) {\n      setPost(prevPost => {\n        const updatedPost = prevPost.map(postItem => {\n          if (postItem._id === newComment.postID) {\n            // Nếu postID trùng khớp với postItem._id, chèn newComment vào đầu mảng comments\n            const updatedComments = [newComment, ...postItem.comments];\n            return {\n              ...postItem,\n              comments: updatedComments\n            };\n          }\n          return postItem;\n        });\n        return updatedPost; // React sẽ tự động cập nhật lại trạng thái post với updatedPost\n      });\n    }\n\n    socket.on(\"postAdded\", handlePostAdded);\n    socket.on(\"commentAdded\", handleCommentAdded);\n    return () => {\n      socket.off(\"postAdded\", handlePostAdded);\n      socket.off(\"commentAdded\", handleCommentAdded);\n    };\n  }, []);\n  useEffect(() => {\n    getMaxPost();\n  }, [post]);\n  async function getMaxPost() {\n    const MAXPOST = await getNumberPost();\n    setMaxPost(MAXPOST.numberPost);\n    if (MAXPOST.numberPost > 0) setHasMore(true);\n  }\n  async function fetchData(fromPage, toPage) {\n    // Gửi thông báo đến server để lấy bài viết\n    const data = await getLimitPost(fromPage, toPage, userRef.current._id);\n    setPost(data);\n  }\n  async function fetchMoreData() {\n    if (post.length == maxPost) {\n      setHasMore(false);\n      return;\n    }\n    const toPost = post.length + limitPost;\n\n    // Lấy thêm dữ liệu\n    const data = await getLimitPost(post.length, toPost, userRef.current._id);\n    const newData = post.concat(data);\n    setPost(newData);\n  }\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: post.length,\n    next: fetchMoreData,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }, this),\n    scrollableTarget: \"content\",\n    children: post.map((item, index) => /*#__PURE__*/_jsxDEV(Post, {\n      _id: item._id,\n      sender: item.sender,\n      content: {\n        text: item.content.text,\n        image: item.content.image !== \"\" ? `${server}/uploads/${item.content.image}` : \"\"\n      },\n      creationTime: item.creationTime,\n      comments: item.comments,\n      post: post,\n      setPost: setPost,\n      loves: item.loves ? item.loves : 0 // Tổng số lượt tương tác bài viết\n      ,\n\n      isLove: item.isLove // Trạng thái tương tác\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n_s(PostList, \"5gl6L6mSjKQQttDs4IPd/Di6hpY=\");\n_c = PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Post","socket","InfiniteScroll","getLimitPost","getNumberPost","jsxDEV","_jsxDEV","server","process","env","REACT_APP_SEVER_IP","REACT_APP_SERVER_PORT","PostList","_s","maxPost","setMaxPost","fromPage","setFromPage","limitPost","setLimitPost","post","setPost","hasMore","setHasMore","userRef","loadingTimeoutRef","current","JSON","parse","sessionStorage","getItem","user","fetchData","getMaxPost","handlePostAdded","newPost","newList","handleCommentAdded","newComment","prevPost","updatedPost","map","postItem","_id","postID","updatedComments","comments","on","off","MAXPOST","numberPost","toPage","data","fetchMoreData","length","toPost","newData","concat","dataLength","next","loader","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollableTarget","item","index","sender","content","text","image","creationTime","loves","isLove","_c","$RefreshReg$"],"sources":["C:/Users/quoct/Data/Exercise D21KTPM/BCKH Cấp Viện/Semester-1-Year-3/f2c/v1.0.5/client/src/components/PostList.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Post from \"./Post\";\r\nimport socket from \"../socket/socket-client\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { getLimitPost, getNumberPost } from \"../adapters/post\";\r\n\r\nconst server = process.env.REACT_APP_SEVER_IP + \":\" + process.env.REACT_APP_SERVER_PORT\r\n\r\nexport default function PostList() {\r\n    const [maxPost, setMaxPost] = useState(0)\r\n    const [fromPage, setFromPage] = useState(1)\r\n    const [limitPost, setLimitPost] = useState(2)\r\n    const [post, setPost] = useState([]);\r\n    const [hasMore, setHasMore] = useState(false)\r\n    const userRef = useRef();\r\n    const loadingTimeoutRef = useRef(null);\r\n    // LOAD POST ONE TIME\r\n    useEffect(() => {\r\n        userRef.current = JSON.parse(sessionStorage.getItem(\"userAuth\")).user\r\n        fetchData(fromPage - 1, limitPost);\r\n\r\n        getMaxPost();\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        function handlePostAdded(newPost) {\r\n            const newList = [newPost, ...post]\r\n\r\n            setPost(newList)\r\n        }\r\n\r\n        function handleCommentAdded(newComment) {\r\n            setPost((prevPost) => {\r\n                const updatedPost = prevPost.map((postItem) => {\r\n                    if (postItem._id === newComment.postID) {    \r\n                        // Nếu postID trùng khớp với postItem._id, chèn newComment vào đầu mảng comments\r\n                        const updatedComments = [newComment, ...postItem.comments];\r\n                        return {\r\n                            ...postItem,\r\n                            comments: updatedComments,\r\n                        };\r\n                    }\r\n                    return postItem;\r\n                });\r\n                return updatedPost; // React sẽ tự động cập nhật lại trạng thái post với updatedPost\r\n            });\r\n        }\r\n\r\n        socket.on(\"postAdded\", handlePostAdded)\r\n        socket.on(\"commentAdded\", handleCommentAdded)\r\n\r\n        return () => {\r\n            socket.off(\"postAdded\", handlePostAdded)\r\n            socket.off(\"commentAdded\", handleCommentAdded)\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getMaxPost()\r\n    \r\n    }, [post])\r\n\r\n    async function getMaxPost() {\r\n        const MAXPOST = await getNumberPost()\r\n\r\n        setMaxPost(MAXPOST.numberPost)\r\n\r\n        if (MAXPOST.numberPost > 0)\r\n            setHasMore(true)\r\n    }\r\n\r\n    async function fetchData(fromPage, toPage) {\r\n        // Gửi thông báo đến server để lấy bài viết\r\n        const data = await getLimitPost(fromPage, toPage, userRef.current._id)\r\n\r\n        setPost(data)\r\n    }\r\n\r\n    async function fetchMoreData() {\r\n        if (post.length == maxPost) {\r\n            setHasMore(false)\r\n            return\r\n        }\r\n\r\n        const toPost = post.length + limitPost\r\n\r\n        // Lấy thêm dữ liệu\r\n        const data = await getLimitPost(post.length, toPost, userRef.current._id);\r\n        const newData = post.concat(data)\r\n\r\n        setPost(newData)\r\n    }\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={post.length}\r\n            next={fetchMoreData}\r\n            hasMore={hasMore}\r\n            loader={<h4>Loading...</h4>}\r\n            scrollableTarget=\"content\"\r\n        >\r\n            {\r\n                post.map((item, index) => (\r\n                    <Post\r\n                        key={index}\r\n\r\n                        _id={item._id}\r\n\r\n                        sender={item.sender}\r\n\r\n                        content={{\r\n                            text: item.content.text,\r\n                            image: item.content.image !== \"\" ? `${server}/uploads/${item.content.image}` : \"\",\r\n                        }}\r\n\r\n                        creationTime={item.creationTime}\r\n\r\n                        comments={item.comments}\r\n\r\n                        post={post}\r\n\r\n                        setPost={setPost}\r\n\r\n                        loves={ (item.loves) ? item.loves : 0}      // Tổng số lượt tương tác bài viết\r\n\r\n                        isLove={item.isLove}                        // Trạng thái tương tác\r\n                    />\r\n                ))\r\n            }\r\n        </InfiniteScroll>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}